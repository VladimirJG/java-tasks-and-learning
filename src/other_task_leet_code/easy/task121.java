package other_task_leet_code.easy;

/**
 * 121 . Лучшее время для покупки и продажи акций
 * Легкий
 * 25,1 тыс.
 * 793
 * Компании
 * Вам дан массив prices, где prices[i]указана цена данной акции в день .ith
 * <p>
 * Вы хотите максимизировать свою прибыль, выбрав один день для покупки одной акции и выбрав другой день в будущем для продажи этой акции.
 * <p>
 * Верните максимальную прибыль, которую вы можете получить от этой сделки . Если вы не можете получить какую-либо прибыль, верните 0.
 * <p>
 * <p>
 * <p>
 * Пример 1:
 * <p>
 * Входные данные: цены = [7,1,5,3,6,4]
 * Выходные данные: 5
 * Объяснение: Покупка во 2-й день (цена = 1) и продажа в 5-й день (цена = 6), прибыль = 6-1 = 5.
 * Обратите внимание, что покупка во 2-й день и продажа в 1-й день не разрешены, потому что вы должны купить перед продажей.
 * Пример 2:
 * <p>
 * Ввод: цены = [7,6,4,3,1]
 * Вывод: 0
 * Объяснение: В этом случае транзакции не совершаются и максимальная прибыль = 0.
 */
public class task121 {
    public static void main(String[] args) {
        int[] arr = {7,1,5,3,6,4};
        System.out.println(maxProfit(arr));

    }

    public static int maxProfit(int[] prices) {
        int maxi = 0;
        int minimum = prices[0];
        for (int i = 0; i < prices.length; i++) {
            minimum = Math.min(minimum, prices[i]);
            maxi = Math.max(maxi, prices[i] - minimum);
        }
        return maxi;

    }
}